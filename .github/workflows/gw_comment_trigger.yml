name: Bugspots Analysis via Comment

on:
  issue_comment:
    types: [created]

jobs:
  parse-comment:
    if: github.event.issue.pull_request == null && contains(github.event.comment.body, 'gw --repo')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      
    outputs:
      repo_url: ${{ steps.parse.outputs.repo_url }}
      limit: ${{ steps.parse.outputs.limit }}
      
    steps:
      - name: Parse comment
        id: parse
        run: |
          comment_body="${{ github.event.comment.body }}"
          echo "Comment body: $comment_body"
          
          # Extract repository URL
          repo_url=$(echo "$comment_body" | grep -oP 'gw --repo \K[^\s]+' || echo "")
          if [ -z "$repo_url" ]; then
            echo "Error: No repository URL found in comment"
            exit 1
          fi
          
          # Extract limit (default to 10 if not specified)
          limit=$(echo "$comment_body" | grep -oP '--limit \K\d+' || echo "10")
          
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "limit=$limit" >> $GITHUB_OUTPUT
          echo "Parsed repo: $repo_url, limit: $limit"

  run-bugspots:
    needs: parse-comment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          
      - name: Install bugspots gem
        run: gem install bugspots
        
      - name: Run Bugspots Comment Analyzer
        id: bugspots
        run: |
          chmod +x gw.sh
          # Modify the script to accept single repository
          ./gw.sh "${{ needs.parse-comment.outputs.repo_url }}" "${{ needs.parse-comment.outputs.limit }}"
          
      - name: Prepare comment response
        run: |
          repo_name=$(basename "${{ needs.parse-comment.outputs.repo_url }}" .git)
          limit="${{ needs.parse-comment.outputs.limit }}"
          
          if [ -f "bugspots-results/bugspots-${repo_name}.log" ] && [ -s "bugspots-results/bugspots-${repo_name}.log" ]; then
            # Parse the bugspots output to extract hotspots
            if grep -q "Hotspots:" "bugspots-results/bugspots-${repo_name}.log"; then
              echo "## 🎯 Bugspots Analysis Results" > comment.md
              echo "" >> comment.md
              echo "**Repository:** \`${{ needs.parse-comment.outputs.repo_url }}\`" >> comment.md
              echo "**Analysis Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> comment.md
              echo "" >> comment.md
              
              # Extract number of bugfix commits and hotspots from the summary
              bugfix_commits=$(grep -oP 'Found \K\d+(?= bugfix commits)' "bugspots-results/bugspots-${repo_name}.log" || echo "unknown")
              total_hotspots=$(grep -oP 'with \K\d+(?= hotspots)' "bugspots-results/bugspots-${repo_name}.log" || echo "unknown")
              
              echo "**Analysis Summary:**" >> comment.md
              echo "- Found **${bugfix_commits}** bugfix commits" >> comment.md
              echo "- Identified **${total_hotspots}** total hotspots" >> comment.md
              echo "- Showing top **${limit}** files most likely to contain bugs" >> comment.md
              echo "" >> comment.md
              
              # Extract hotspots section and get top N entries
              echo "### 🔥 Top ${limit} Hotspots" >> comment.md
              echo "" >> comment.md
              echo '```' >> comment.md
              echo "Score    File" >> comment.md
              echo "-------  ----" >> comment.md
              
              # Extract lines after "Hotspots:" and take only the top N
              sed -n '/Hotspots:/,/^$/p' "bugspots-results/bugspots-${repo_name}.log" | \
              grep -E '^\s*[0-9]+\.[0-9]+.*' | \
              head -n "$limit" | \
              sed 's/^\s*//' >> comment.md
              
              echo '```' >> comment.md
              echo "" >> comment.md
              echo "> 💡 **How to read this:** Higher scores indicate files more likely to contain bugs." >> comment.md
              echo "> Scores are based on frequency and recency of bug-fix commits affecting each file." >> comment.md
              echo "" >> comment.md
              echo "### 📊 Understanding the Results" >> comment.md
              echo "- **Score range:** 0.0 to 1.0 (higher = more bug-prone)" >> comment.md
              echo "- **Analysis based on:** Commit messages containing keywords like 'fix', 'bug', 'issue', etc." >> comment.md
              echo "- **Files with score 0.0:** No recent bug fixes detected" >> comment.md
            else
              # No hotspots section found
              echo "## ⚠️ Bugspots Analysis Results" > comment.md
              echo "" >> comment.md
              echo "**Repository:** \`${{ needs.parse-comment.outputs.repo_url }}\`" >> comment.md
              echo "**Analysis Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> comment.md
              echo "" >> comment.md
              echo "### 📭 No Hotspots Found" >> comment.md
              echo "" >> comment.md
              echo "The analysis completed but no hotspots were identified." >> comment.md
              echo "" >> comment.md
              echo "**Possible reasons:**" >> comment.md
              echo "- Repository has very few or no bug-fix commits" >> comment.md
              echo "- Commit messages don't match standard bug-fix patterns" >> comment.md
              echo "- Repository is well-maintained with minimal bugs" >> comment.md
              echo "" >> comment.md
              echo "**Raw output preview:**" >> comment.md
              echo '```' >> comment.md
              head -n 20 "bugspots-results/bugspots-${repo_name}.log" >> comment.md
              echo '```' >> comment.md
            fi
          else
            echo "## ⚠️ Bugspots Analysis Results" > comment.md
            echo "" >> comment.md
            echo "**Repository:** \`${{ needs.parse-comment.outputs.repo_url }}\`" >> comment.md
            echo "**Analysis Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> comment.md
            echo "" >> comment.md
            
            if [ -f "bugspots-results/bugspots-${repo_name}.err" ]; then
              echo "### ❌ Analysis Failed" >> comment.md
              echo "" >> comment.md
              echo "**Error details:**" >> comment.md
              echo '```' >> comment.md
              cat "bugspots-results/bugspots-${repo_name}.err" >> comment.md
              echo '```' >> comment.md
            else
              echo "### 📭 No Results Found" >> comment.md
              echo "" >> comment.md
              echo "No analysis results were generated." >> comment.md
              echo "" >> comment.md
              echo "**This could mean:**" >> comment.md
              echo "- The repository has no commit history" >> comment.md
              echo "- The repository could not be accessed" >> comment.md
              echo "- The bugspots analysis encountered an unexpected issue" >> comment.md
            fi
          fi
          
      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });